import Foundation
import XcodeIssueReporting
import ImageIO


@main
public struct DatedImageGeneratorLib {
    
    static func main() throws {
        let invocation = try JSONDecoder().decode(PluginInvocation.self, from: Data(ProcessInfo.processInfo.arguments[1].utf8))
        
        guard !invocation.catalogPaths.isEmpty else {
            XcodeIssue.report(XcodeIssue.warning("No asset catalogs were provided, code will not be generated"))
            return
        }
        
        let content: String = try fileContent(for: invocation.catalogPaths)
        
        try content.write(toFile: invocation.outputPath,
                          atomically: true,
                          encoding: .utf8)
    }
    
    static func readMetadata(fromURL url: URL) -> NSDictionary? {
        if
            let source = CGImageSourceCreateWithURL(url as CFURL, nil),
            let metadata: NSDictionary = CGImageSourceCopyPropertiesAtIndex(source, 0, nil) {
            return metadata
        }
        return nil
    }
    
    static func fileContent(for catalogPaths: [String]) throws -> String {
        let allImageNames = try catalogPaths.flatMap { try imageNamesForCatalog(at: $0) }
        
        var content = String()
        
        let header =
"""
/// This file auto-generated by Dated Image Generator. Do not edit manually.

struct AssetCatalogImages {

"""
        content.append(header)
        
        let images = allImageNames.sorted().map { imageName in
            
            
            return
"""
  static let \(imageName) = DatedImage(imageName: "\(imageName)", dateTaken: Date)
"""
        }
        
        content.append(images.joined(separator: "\n\n"))
        
        let footer =
"""

}
"""
        content.append(footer)
        
        return content
    }

    
    static func imageNamesForCatalog(at path: String) throws  -> [String] {
        let contents = try contentsOfFolderAtPath(path)
        debugPrint("CONTENTS: \(contents)")
        
        let imageSets = contents
            .filter { $0.hasSuffix(".imageset") }
        
        let imageNames = imageSets.map { ($0 as NSString).deletingPathExtension }
        
        return imageNames
    }

    
    private static func contentsOfFolderAtPath(_ path: String) throws -> [String] {
        let escapedPath = path.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed)!
        let url = URL(string: escapedPath)!
        
        let contents = try FileManager.default.contentsOfDirectory(at: url, includingPropertiesForKeys: [.nameKey] , options: .skipsHiddenFiles)
        
        return contents.map { $0.lastPathComponent }
    }
}

struct PluginInvocation: Codable {
    let catalogPaths: [String]
    let outputPath: String

    func encodedString() throws -> String {
        let data = try JSONEncoder().encode(self)
        return String(decoding: data, as: UTF8.self)
    }
}
